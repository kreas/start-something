AWSTemplateFormatVersion: '2010-09-09'
Description: Exported by architect/package@1.3.3 on 2020-05-20T17:08:32.875Z
Outputs:
  API:
    Description: API Gateway
    Value:
      Fn::Sub:
      - https://${restApiId}.execute-api.${AWS::Region}.amazonaws.com/production
      - restApiId:
          Ref: StartSomething
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
  restApiId:
    Description: HTTP restApiId
    Value:
      Ref: StartSomething
Resources:
  GetApi:
    Properties:
      CodeUri: s3://start-something-cfn-deployments-496ce/0f07075801672d2a100692fc4851bdb1
      Environment:
        Variables:
          ARC_APP_NAME: start-something
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_HTTP: aws_proxy
          ARC_ROLE:
            Ref: Role
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
      Events:
        GetApiEvent:
          Properties:
            Method: GET
            Path: /api
            RestApiId:
              Ref: StartSomething
          Type: Api
      Handler: index.handler
      MemorySize: 1152
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Runtime: nodejs12.x
      Timeout: 5
    Type: AWS::Serverless::Function
  GetIndex:
    Properties:
      CodeUri: s3://start-something-cfn-deployments-496ce/53db6ca5dbd13499e8948d80da5d47e3
      Environment:
        Variables:
          ARC_APP_NAME: start-something
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_HTTP: aws_proxy
          ARC_ROLE:
            Ref: Role
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
      Events:
        GetIndexEvent:
          Properties:
            Method: GET
            Path: /
            RestApiId:
              Ref: StartSomething
          Type: Api
      Handler: index.handler
      MemorySize: 1152
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Runtime: nodejs12.x
      Timeout: 5
    Type: AWS::Serverless::Function
  InvokeProxyPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetIndex
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/*
        - restApiId:
            Ref: StartSomething
    Type: AWS::Lambda::Permission
  ParameterStorePolicy:
    DependsOn: Role
    Properties:
      PolicyDocument:
        Statement:
        - Action: ssm:GetParametersByPath
          Effect: Allow
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
      PolicyName: ArcParameterStorePolicy
      Roles:
      - Ref: Role
    Type: AWS::IAM::Policy
  Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
        PolicyName: ArcGlobalPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            Effect: Allow
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
        PolicyName: ArcStaticBucketPolicy
    Type: AWS::IAM::Role
  StartSomething:
    Properties:
      BinaryMediaTypes:
      - '*~1*'
      DefinitionBody:
        info:
          title:
            Ref: AWS::StackName
        openapi: 3.0.1
        paths:
          /:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    contentHandling: CONVERT_TO_TEXT
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
          /_static/{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - in: path
                name: proxy
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                cacheKeyParameters:
                - method.request.path.proxy
                cacheNamespace: xlr8r2
                httpMethod: ANY
                passthroughBehavior: when_no_match
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                responses:
                  default:
                    statusCode: '200'
                type: http_proxy
                uri:
                  Fn::Sub:
                  - http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
          /api:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    contentHandling: CONVERT_TO_TEXT
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApi.Arn}/invocations
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - in: path
                name: proxy
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                cacheKeyParameters:
                - method.request.path.proxy
                cacheNamespace: xlr8r
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
      EndpointConfiguration: REGIONAL
      MinimumCompressionSize: 0
      StageName: production
    Type: AWS::Serverless::Api
  StaticBucket:
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        ErrorDocument: 404.html
        IndexDocument: index.html
    Type: AWS::S3::Bucket
  StaticBucketParam:
    Properties:
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: bucket
      Type: String
      Value:
        Ref: StaticBucket
    Type: AWS::SSM::Parameter
  StaticFingerprintParam:
    Properties:
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: fingerprint
      Type: String
      Value: 'true'
    Type: AWS::SSM::Parameter
Transform: AWS::Serverless-2016-10-31
